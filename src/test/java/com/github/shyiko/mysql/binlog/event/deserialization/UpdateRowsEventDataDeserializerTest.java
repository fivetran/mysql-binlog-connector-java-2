package com.github.shyiko.mysql.binlog.event.deserialization;

import com.github.shyiko.mysql.binlog.event.TableMapEventData;
import com.github.shyiko.mysql.binlog.event.UpdateRowsEventData;
import com.github.shyiko.mysql.binlog.io.ByteArrayInputStream;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.BitSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.IntStream;

import org.junit.Assert;

public class UpdateRowsEventDataDeserializerTest {
    private static final byte[] TABLE_MAP_DATA = {
        (byte)0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x74, 0x70, 0x63, 0x63, 0x36,
        0x00, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x00, 0x15, 0x03, 0x03, 0x03,
        0x0f, (byte)0xfe, 0x0f, 0x0f, 0x0f, 0x0f, (byte)0xfe, (byte)0xfe, (byte)0xfe, 0x12, (byte)0xfe,
        (byte)0xf6, (byte)0xf6, (byte)0xf6, (byte)0xf6, 0x03, 0x03, 0x0f, 0x1f, 0x10, 0x00, (byte)0xfe,
        0x02, 0x10, 0x00, 0x14, 0x00, 0x14, 0x00, 0x14, 0x00, (byte)0xfe, 0x02, (byte)0xfe, 0x09,
        (byte)0xfe, 0x10, 0x00, (byte)0xfe, 0x02, 0x0c, 0x02, 0x04, 0x04, 0x0c, 0x02, 0x0c, 0x02,
        (byte)0xf4, 0x01, (byte)0xf8, (byte)0xff, 0x1f, 0x01, 0x02, 0x00, 0x00, 0x02, 0x01, 0x2f
    };

    private static final byte[] UPDATE_ROWS_DATA = {
        (byte)0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x15, (byte)0xff, (byte)0xff,
        (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, 0x00, 0x00, 0x00, (byte)0xae, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x09, 0x37, 0x79, 0x77, 0x74, 0x44, 0x75, 0x71,
        0x4c, 0x4f, 0x02, 0x4f, 0x45, 0x0d, 0x4f, 0x55, 0x47, 0x48, 0x54, 0x43, 0x41, 0x4c, 0x4c, 0x59,
        0x50, 0x52, 0x49, 0x14, 0x78, 0x47, 0x4f, 0x39, 0x4b, 0x78, 0x62, 0x50, 0x79, 0x4e, 0x6b, 0x43,
        0x4f, 0x4c, 0x6a, 0x4d, 0x44, 0x61, 0x71, 0x34, 0x13, 0x6f, 0x79, 0x54, 0x58, 0x79, 0x55, 0x4b,
        0x6d, 0x30, 0x4f, 0x64, 0x52, 0x59, 0x41, 0x4c, 0x46, 0x78, 0x5a, 0x42, 0x14, 0x4c, 0x65, 0x76,
        0x49, 0x51, 0x6b, 0x4a, 0x51, 0x57, 0x61, 0x55, 0x4f, 0x76, 0x4e, 0x6b, 0x33, 0x74, 0x35, 0x73,
        0x6a, 0x02, 0x34, 0x4b, 0x09, 0x32, 0x35, 0x39, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x10, 0x34,
        0x35, 0x35, 0x39, 0x33, 0x36, 0x33, 0x33, 0x39, 0x32, 0x31, 0x39, 0x30, 0x38, 0x31, 0x30, (byte)0x99,
        (byte)0xb5, 0x16, 0x10, (byte)0xaf, 0x02, 0x47, 0x43, (byte)0x80, 0x00, 0x00, (byte)0xc3, 0x50,
        0x00, (byte)0x81, (byte)0xf4, 0x7f, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xf5, (byte)0xff,
        (byte)0x80, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
        0x01, 0x4b, 0x78, 0x68, 0x71, 0x4c, 0x65, 0x6c, 0x77, 0x47, 0x38, 0x4a, 0x79, 0x56, 0x72, 0x7a,
        0x6e, 0x69, 0x49, 0x36, 0x75, 0x6d, 0x7a, 0x73, 0x33, 0x75, 0x65, 0x77, 0x33, 0x57, 0x79, 0x61,
        0x55, 0x4d, 0x66, 0x52, 0x79, 0x59, 0x48, 0x59, 0x62, 0x65, 0x52, 0x41, 0x4c, 0x35, 0x67, 0x4d,
        0x78, 0x42, 0x69, 0x65, 0x34, 0x55, 0x68, 0x58, 0x72, 0x74, 0x6c, 0x46, 0x73, 0x64, 0x30, 0x70,
        0x45, 0x34, 0x6f, 0x67, 0x78, 0x51, 0x59, 0x61, 0x78, 0x52, 0x54, 0x67, 0x6a, 0x6d, 0x6d, 0x46,
        0x64, 0x41, 0x33, 0x63, 0x4c, 0x6b, 0x47, 0x44, 0x30, 0x49, 0x6d, 0x57, 0x72, 0x35, 0x6a, 0x45,
        0x39, 0x50, 0x38, 0x75, 0x7a, 0x55, 0x52, 0x59, 0x63, 0x46, 0x57, 0x39, 0x30, 0x30, 0x37, 0x57,
        0x63, 0x74, 0x64, 0x6e, 0x67, 0x58, 0x6f, 0x6a, 0x6a, 0x4c, 0x53, 0x6a, 0x75, 0x30, 0x6e, 0x41,
        0x35, 0x44, 0x68, 0x67, 0x34, 0x6f, 0x63, 0x57, 0x37, 0x33, 0x6f, 0x43, 0x4e, 0x58, 0x78, 0x78,
        0x5a, 0x6c, 0x63, 0x6d, 0x34, 0x46, 0x72, 0x4b, 0x4b, 0x59, 0x47, 0x47, 0x33, 0x76, 0x66, 0x42,
        0x74, 0x6f, 0x75, 0x6a, 0x53, 0x77, 0x6e, 0x6d, 0x6f, 0x69, 0x48, 0x50, 0x61, 0x56, 0x38, 0x4a,
        0x36, 0x53, 0x4f, 0x6f, 0x71, 0x68, 0x72, 0x41, 0x59, 0x65, 0x7a, 0x51, 0x59, 0x75, 0x71, 0x46,
        0x43, 0x62, 0x47, 0x50, 0x45, 0x5a, 0x55, 0x59, 0x4c, 0x48, 0x69, 0x43, 0x74, 0x64, 0x4a, 0x47,
        0x52, 0x38, 0x34, 0x48, 0x38, 0x6a, 0x30, 0x75, 0x56, 0x61, 0x6d, 0x33, 0x78, 0x43, 0x53, 0x51,
        0x31, 0x62, 0x6e, 0x4b, 0x78, 0x4b, 0x68, 0x69, 0x43, 0x36, 0x55, 0x44, 0x6d, 0x73, 0x45, 0x69,
        0x47, 0x51, 0x38, 0x30, 0x33, 0x55, 0x77, 0x56, 0x6b, 0x6d, 0x70, 0x30, 0x42, 0x6e, 0x6b, 0x73,
        0x56, 0x32, 0x78, 0x58, 0x41, 0x79, 0x77, 0x70, 0x56, 0x68, 0x35, 0x67, 0x54, 0x74, 0x47, 0x61,
        0x4f, 0x4e, 0x74, 0x48, 0x55, 0x34, 0x63, 0x6a, 0x59, 0x57, 0x4e, 0x6a, 0x70, 0x70, 0x33, 0x41,
        0x4f, 0x55, 0x70, 0x32, 0x30, 0x67, 0x57, 0x66, 0x39, 0x59, 0x4b, 0x4d, 0x64, 0x4b, 0x73, 0x41,
        0x6c, 0x62, 0x52, 0x37, 0x4a, 0x45, 0x56, 0x43, 0x45, 0x4c, 0x6f, 0x4b, 0x39, 0x51, 0x53, 0x4d,
        0x37, 0x54, 0x5a, 0x63, 0x73, 0x34, 0x6a, 0x47, 0x50, 0x7a, 0x34, 0x50, 0x50, 0x4d, 0x75, 0x6c,
        0x48, 0x54, 0x65, 0x53, 0x33, 0x75, 0x4f, 0x49, 0x66, 0x4d, 0x34, 0x6b, 0x55, 0x42, 0x64, 0x72,
        0x4f, 0x00, 0x00, 0x00, (byte)0xae, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00,
        0x00, 0x09, 0x37, 0x79, 0x77, 0x74, 0x44, 0x75, 0x71, 0x4c, 0x4f, 0x02, 0x4f, 0x45, 0x0d, 0x4f,
        0x55, 0x47, 0x48, 0x54, 0x43, 0x41, 0x4c, 0x4c, 0x59, 0x50, 0x52, 0x49, 0x14, 0x78, 0x47, 0x4f,
        0x39, 0x4b, 0x78, 0x62, 0x50, 0x79, 0x4e, 0x6b, 0x43, 0x4f, 0x4c, 0x6a, 0x4d, 0x44, 0x61, 0x71,
        0x34, 0x13, 0x6f, 0x79, 0x54, 0x58, 0x79, 0x55, 0x4b, 0x6d, 0x30, 0x4f, 0x64, 0x52, 0x59, 0x41,
        0x4c, 0x46, 0x78, 0x5a, 0x42, 0x14, 0x4c, 0x65, 0x76, 0x49, 0x51, 0x6b, 0x4a, 0x51, 0x57, 0x61,
        0x55, 0x4f, 0x76, 0x4e, 0x6b, 0x33, 0x74, 0x35, 0x73, 0x6a, 0x02, 0x34, 0x4b, 0x09, 0x32, 0x35,
        0x39, 0x30, 0x31, 0x31, 0x31, 0x31, 0x31, 0x10, 0x34, 0x35, 0x35, 0x39, 0x33, 0x36, 0x33, 0x33,
        0x39, 0x32, 0x31, 0x39, 0x30, 0x38, 0x31, 0x30, (byte)0x99, (byte)0xb5, 0x16, 0x10, (byte)0xaf,
        0x02, 0x47, 0x43, (byte)0x80, 0x00, 0x00, (byte)0xc3, 0x50, 0x00, (byte)0x81, (byte)0xf4, (byte)0x80,
        0x00, 0x00, 0x00, (byte)0xed, 0x00, (byte)0x80, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x4b, 0x78, 0x68, 0x71, 0x4c, 0x65, 0x6c, 0x77, 0x47,
        0x38, 0x4a, 0x79, 0x56, 0x72, 0x7a, 0x6e, 0x69, 0x49, 0x36, 0x75, 0x6d, 0x7a, 0x73, 0x33, 0x75,
        0x65, 0x77, 0x33, 0x57, 0x79, 0x61, 0x55, 0x4d, 0x66, 0x52, 0x79, 0x59, 0x48, 0x59, 0x62, 0x65,
        0x52, 0x41, 0x4c, 0x35, 0x67, 0x4d, 0x78, 0x42, 0x69, 0x65, 0x34, 0x55, 0x68, 0x58, 0x72, 0x74,
        0x6c, 0x46, 0x73, 0x64, 0x30, 0x70, 0x45, 0x34, 0x6f, 0x67, 0x78, 0x51, 0x59, 0x61, 0x78, 0x52,
        0x54, 0x67, 0x6a, 0x6d, 0x6d, 0x46, 0x64, 0x41, 0x33, 0x63, 0x4c, 0x6b, 0x47, 0x44, 0x30, 0x49,
        0x6d, 0x57, 0x72, 0x35, 0x6a, 0x45, 0x39, 0x50, 0x38, 0x75, 0x7a, 0x55, 0x52, 0x59, 0x63, 0x46,
        0x57, 0x39, 0x30, 0x30, 0x37, 0x57, 0x63, 0x74, 0x64, 0x6e, 0x67, 0x58, 0x6f, 0x6a, 0x6a, 0x4c,
        0x53, 0x6a, 0x75, 0x30, 0x6e, 0x41, 0x35, 0x44, 0x68, 0x67, 0x34, 0x6f, 0x63, 0x57, 0x37, 0x33,
        0x6f, 0x43, 0x4e, 0x58, 0x78, 0x78, 0x5a, 0x6c, 0x63, 0x6d, 0x34, 0x46, 0x72, 0x4b, 0x4b, 0x59,
        0x47, 0x47, 0x33, 0x76, 0x66, 0x42, 0x74, 0x6f, 0x75, 0x6a, 0x53, 0x77, 0x6e, 0x6d, 0x6f, 0x69,
        0x48, 0x50, 0x61, 0x56, 0x38, 0x4a, 0x36, 0x53, 0x4f, 0x6f, 0x71, 0x68, 0x72, 0x41, 0x59, 0x65,
        0x7a, 0x51, 0x59, 0x75, 0x71, 0x46, 0x43, 0x62, 0x47, 0x50, 0x45, 0x5a, 0x55, 0x59, 0x4c, 0x48,
        0x69, 0x43, 0x74, 0x64, 0x4a, 0x47, 0x52, 0x38, 0x34, 0x48, 0x38, 0x6a, 0x30, 0x75, 0x56, 0x61,
        0x6d, 0x33, 0x78, 0x43, 0x53, 0x51, 0x31, 0x62, 0x6e, 0x4b, 0x78, 0x4b, 0x68, 0x69, 0x43, 0x36,
        0x55, 0x44, 0x6d, 0x73, 0x45, 0x69, 0x47, 0x51, 0x38, 0x30, 0x33, 0x55, 0x77, 0x56, 0x6b, 0x6d,
        0x70, 0x30, 0x42, 0x6e, 0x6b, 0x73, 0x56, 0x32, 0x78, 0x58, 0x41, 0x79, 0x77, 0x70, 0x56, 0x68,
        0x35, 0x67, 0x54, 0x74, 0x47, 0x61, 0x4f, 0x4e, 0x74, 0x48, 0x55, 0x34, 0x63, 0x6a, 0x59, 0x57,
        0x4e, 0x6a, 0x70, 0x70, 0x33, 0x41, 0x4f, 0x55, 0x70, 0x32, 0x30, 0x67, 0x57, 0x66, 0x39, 0x59,
        0x4b, 0x4d, 0x64, 0x4b, 0x73, 0x41, 0x6c, 0x62, 0x52, 0x37, 0x4a, 0x45, 0x56, 0x43, 0x45, 0x4c,
        0x6f, 0x4b, 0x39, 0x51, 0x53, 0x4d, 0x37, 0x54, 0x5a, 0x63, 0x73, 0x34, 0x6a, 0x47, 0x50, 0x7a,
        0x34, 0x50, 0x50, 0x4d, 0x75, 0x6c, 0x48, 0x54, 0x65, 0x53, 0x33, 0x75, 0x4f, 0x49, 0x66, 0x4d,
        0x34, 0x6b, 0x55, 0x42, 0x64, 0x72, 0x4f
    };

    private final Map<Long, TableMapEventData> tableMapByTableId = new HashMap<>();

    @Before
    public void setUp() throws IOException {
        TableMapEventDataDeserializer deserializer = new TableMapEventDataDeserializer();
        TableMapEventData tableMapEventData = deserializer.deserialize(new BinaryLogEventDataReader(TABLE_MAP_DATA));
        tableMapByTableId.put(tableMapEventData.getTableId(), tableMapEventData);
    }

    @Test
    public void deserialize_shouldProperlyDeserializeData_withInputStream() throws IOException {
        UpdateRowsEventDataDeserializer deserializer = new UpdateRowsEventDataDeserializer(tableMapByTableId);
        deserializer.setMayContainExtraInformation(true);

        UpdateRowsEventData actual = deserializer.deserialize(new ByteArrayInputStream(UPDATE_ROWS_DATA));

        assertEventData(actual);
    }

    @Test
    public void deserialize_shouldProperlyDeserializeData_withBinaryReader() throws IOException{
        UpdateRowsEventDataDeserializer deserializer = new UpdateRowsEventDataDeserializer(tableMapByTableId);
        deserializer.setMayContainExtraInformation(true);

        UpdateRowsEventData actual = deserializer.deserialize(new BinaryLogEventDataReader(UPDATE_ROWS_DATA));

        assertEventData(actual);
    }

    private static void assertEventData(UpdateRowsEventData actual) {
        Assert.assertEquals(159, actual.getTableId());
        BitSet allColumnsBitSet = IntStream.range(0, 21).collect(BitSet::new, BitSet::set, BitSet::or);

        Assert.assertEquals(allColumnsBitSet, actual.getIncludedColumnsBeforeUpdate());
        Assert.assertEquals(allColumnsBitSet, actual.getIncludedColumns());

        List<Map.Entry<Serializable[], Serializable[]>> rows = actual.getRows();
        Assert.assertEquals(1, rows.size());

        Serializable[] expectedOldValues = new Serializable[] {
            174,
            1,
            39,
            "7ywtDuqLO",
            "OE",
            "OUGHTCALLYPRI",
            "xGO9KxbPyNkCOLjMDaq4",
            "oyTXyUKm0OdRYALFxZB",
            "LevIQkJQWaUOvNk3t5sj",
            "4K",
            "259011111",
            "4559363392190810",
            new Timestamp(1733878967000L),
            "GC",
            new BigDecimal("50000.00"),
            new BigDecimal("0.0500"),
            new BigDecimal("-10.00"),
            new BigDecimal("10.00"),
            1,
            0,
            "KxhqLelwG8JyVrzniI6umzs3uew3WyaUMfRyYHYbeRAL5gMxBie4UhXrtlFsd0pE4ogxQYaxRTgjmmFdA3cLkGD0ImWr5jE9P8uzURYcFW9007WctdngXojjLSju0nA5Dhg4ocW73oCNXxxZlcm4FrKKYGG3vfBtoujSwnmoiHPaV8J6SOoqhrAYezQYuqFCbGPEZUYLHiCtdJGR84H8j0uVam3xCSQ1bnKxKhiC6UDmsEiGQ803UwVkmp0BnksV2xXAywpVh5gTtGaONtHU4cjYWNjpp3AOUp20gWf9YKMdKsAlbR7JEVCELoK9QSM7TZcs4jGPz4PPMulHTeS3uOIfM4kUBdrO"
        };
        Serializable[] oldValues = rows.get(0).getKey();
        Assert.assertArrayEquals(expectedOldValues, oldValues);

        Serializable[] expectedNewValues = new Serializable[] {
            174,
            1,
            39,
            "7ywtDuqLO",
            "OE",
            "OUGHTCALLYPRI",
            "xGO9KxbPyNkCOLjMDaq4",
            "oyTXyUKm0OdRYALFxZB",
            "LevIQkJQWaUOvNk3t5sj",
            "4K",
            "259011111",
            "4559363392190810",
            new Timestamp(1733878967000L),
            "GC",
            new BigDecimal("50000.00"),
            new BigDecimal("0.0500"),
            new BigDecimal("237.00"),
            new BigDecimal("10.00"),
            1,
            0,
            "KxhqLelwG8JyVrzniI6umzs3uew3WyaUMfRyYHYbeRAL5gMxBie4UhXrtlFsd0pE4ogxQYaxRTgjmmFdA3cLkGD0ImWr5jE9P8uzURYcFW9007WctdngXojjLSju0nA5Dhg4ocW73oCNXxxZlcm4FrKKYGG3vfBtoujSwnmoiHPaV8J6SOoqhrAYezQYuqFCbGPEZUYLHiCtdJGR84H8j0uVam3xCSQ1bnKxKhiC6UDmsEiGQ803UwVkmp0BnksV2xXAywpVh5gTtGaONtHU4cjYWNjpp3AOUp20gWf9YKMdKsAlbR7JEVCELoK9QSM7TZcs4jGPz4PPMulHTeS3uOIfM4kUBdrO"
        };
        Serializable[] newValues = rows.get(0).getValue();
        Assert.assertArrayEquals(expectedNewValues, newValues);
    }
}
